//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using System.Net;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

namespace Weather
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "ndfdXMLBinding", Namespace = "http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
    public class ndfdXML : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback NDFDgenOperationCompleted;

        private System.Threading.SendOrPostCallback NDFDgenByDayOperationCompleted;

        /// <remarks/>
        public ndfdXML()
        {
            this.Url = "http://www.weather.gov/forecasts/xml/SOAP_server/ndfdXMLserver.php";
        }

        /// <remarks/>
        public event NDFDgenCompletedEventHandler NDFDgenCompleted;

        /// <remarks/>
        public event NDFDgenByDayCompletedEventHandler NDFDgenByDayCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgen", RequestNamespace = "http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace = "http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("dwmlOut")]
        public string NDFDgen(decimal latitude, decimal longitude, string product, System.DateTime startTime, System.DateTime endTime, weatherParametersType weatherParameters)
        {
            object[] results = this.Invoke("NDFDgen", new object[] {
                    latitude,
                    longitude,
                    product,
                    startTime,
                    endTime,
                    weatherParameters});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginNDFDgen(decimal latitude, decimal longitude, string product, System.DateTime startTime, System.DateTime endTime, weatherParametersType weatherParameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("NDFDgen", new object[] {
                    latitude,
                    longitude,
                    product,
                    startTime,
                    endTime,
                    weatherParameters}, callback, asyncState);
        }

        /// <remarks/>
        public string EndNDFDgen(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void NDFDgenAsync(decimal latitude, decimal longitude, string product, System.DateTime startTime, System.DateTime endTime, weatherParametersType weatherParameters)
        {
            this.NDFDgenAsync(latitude, longitude, product, startTime, endTime, weatherParameters, null);
        }

        /// <remarks/>
        public void NDFDgenAsync(decimal latitude, decimal longitude, string product, System.DateTime startTime, System.DateTime endTime, weatherParametersType weatherParameters, object userState)
        {
            if ((this.NDFDgenOperationCompleted == null))
            {
                this.NDFDgenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDFDgenOperationCompleted);
            }
            this.InvokeAsync("NDFDgen", new object[] {
                    latitude,
                    longitude,
                    product,
                    startTime,
                    endTime,
                    weatherParameters}, this.NDFDgenOperationCompleted, userState);
        }

        private void OnNDFDgenOperationCompleted(object arg)
        {
            if ((this.NDFDgenCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NDFDgenCompleted(this, new NDFDgenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDay", RequestNamespace = "http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace = "http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("dwmlByDayOut")]
        public string NDFDgenByDay(decimal latitude, decimal longitude, [System.Xml.Serialization.SoapElementAttribute(DataType = "date")] System.DateTime startDate, [System.Xml.Serialization.SoapElementAttribute(DataType = "integer")] string numDays, string format)
        {
            object[] results = this.Invoke("NDFDgenByDay", new object[] {
                    latitude,
                    longitude,
                    startDate,
                    numDays,
                    format});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginNDFDgenByDay(decimal latitude, decimal longitude, System.DateTime startDate, string numDays, string format, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("NDFDgenByDay", new object[] {
                    latitude,
                    longitude,
                    startDate,
                    numDays,
                    format}, callback, asyncState);
        }

        /// <remarks/>
        public string EndNDFDgenByDay(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void NDFDgenByDayAsync(decimal latitude, decimal longitude, System.DateTime startDate, string numDays, string format)
        {
            this.NDFDgenByDayAsync(latitude, longitude, startDate, numDays, format, null);
        }

        /// <remarks/>
        public void NDFDgenByDayAsync(decimal latitude, decimal longitude, System.DateTime startDate, string numDays, string format, object userState)
        {
            if ((this.NDFDgenByDayOperationCompleted == null))
            {
                this.NDFDgenByDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDFDgenByDayOperationCompleted);
            }
            this.InvokeAsync("NDFDgenByDay", new object[] {
                    latitude,
                    longitude,
                    startDate,
                    numDays,
                    format}, this.NDFDgenByDayOperationCompleted, userState);
        }

        private void OnNDFDgenByDayOperationCompleted(object arg)
        {
            if ((this.NDFDgenByDayCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NDFDgenByDayCompleted(this, new NDFDgenByDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        protected override WebRequest GetWebRequest(Uri uri)
        {
            HttpWebRequest request = (HttpWebRequest)base.GetWebRequest(uri);
            request.ProtocolVersion = HttpVersion.Version10;
            return request;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace = "http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
    public partial class weatherParametersType
    {

        private bool maxtField;

        private bool mintField;

        private bool tempField;

        private bool dewField;

        private bool pop12Field;

        private bool qpfField;

        private bool skyField;

        private bool snowField;

        private bool wspdField;

        private bool wdirField;

        private bool wxField;

        private bool wavehField;

        private bool iconsField;

        private bool rhField;

        private bool apptField;

        /// <remarks/>
        public bool maxt
        {
            get
            {
                return this.maxtField;
            }
            set
            {
                this.maxtField = value;
            }
        }

        /// <remarks/>
        public bool mint
        {
            get
            {
                return this.mintField;
            }
            set
            {
                this.mintField = value;
            }
        }

        /// <remarks/>
        public bool temp
        {
            get
            {
                return this.tempField;
            }
            set
            {
                this.tempField = value;
            }
        }

        /// <remarks/>
        public bool dew
        {
            get
            {
                return this.dewField;
            }
            set
            {
                this.dewField = value;
            }
        }

        /// <remarks/>
        public bool pop12
        {
            get
            {
                return this.pop12Field;
            }
            set
            {
                this.pop12Field = value;
            }
        }

        /// <remarks/>
        public bool qpf
        {
            get
            {
                return this.qpfField;
            }
            set
            {
                this.qpfField = value;
            }
        }

        /// <remarks/>
        public bool sky
        {
            get
            {
                return this.skyField;
            }
            set
            {
                this.skyField = value;
            }
        }

        /// <remarks/>
        public bool snow
        {
            get
            {
                return this.snowField;
            }
            set
            {
                this.snowField = value;
            }
        }

        /// <remarks/>
        public bool wspd
        {
            get
            {
                return this.wspdField;
            }
            set
            {
                this.wspdField = value;
            }
        }

        /// <remarks/>
        public bool wdir
        {
            get
            {
                return this.wdirField;
            }
            set
            {
                this.wdirField = value;
            }
        }

        /// <remarks/>
        public bool wx
        {
            get
            {
                return this.wxField;
            }
            set
            {
                this.wxField = value;
            }
        }

        /// <remarks/>
        public bool waveh
        {
            get
            {
                return this.wavehField;
            }
            set
            {
                this.wavehField = value;
            }
        }

        /// <remarks/>
        public bool icons
        {
            get
            {
                return this.iconsField;
            }
            set
            {
                this.iconsField = value;
            }
        }

        /// <remarks/>
        public bool rh
        {
            get
            {
                return this.rhField;
            }
            set
            {
                this.rhField = value;
            }
        }

        /// <remarks/>
        public bool appt
        {
            get
            {
                return this.apptField;
            }
            set
            {
                this.apptField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void NDFDgenCompletedEventHandler(object sender, NDFDgenCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NDFDgenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal NDFDgenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void NDFDgenByDayCompletedEventHandler(object sender, NDFDgenByDayCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NDFDgenByDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal NDFDgenByDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
